name: Terraform Databricks Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Prevent concurrent runs that could cause state lock conflicts
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false  # Queue new runs instead of cancelling

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Prevent hanging forever
    environment: aws-pl-back-cmk  # Use your environment!
    
    permissions:
      id-token: write   # Required for OIDC
      contents: write   # Required for auto-formatting commits
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Use default token for commits
          ref: ${{ github.head_ref || github.ref_name }}  # Checkout actual branch, not detached HEAD

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Option 1: Use OIDC (Recommended - no long-lived credentials)
          # role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          # aws-region: ${{ env.AWS_REGION }}
          
          # Option 2: Use static credentials (comment out role-to-assume above)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS CLI
        run: |
          aws --version
          aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt-check
        working-directory: ./workspace_deployment/aws/wrapper-deployment
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Auto-format Terraform Files
        if: steps.fmt-check.outcome == 'failure'
        working-directory: ./workspace_deployment/aws/wrapper-deployment
        run: |
          echo "⚠️  Terraform files are not properly formatted"
          echo "🔧 Auto-formatting files..."
          terraform fmt -recursive
          echo "✅ Files formatted successfully"

      - name: Commit Formatted Files
        if: steps.fmt-check.outcome == 'failure'
        run: |
          cd workspace_deployment/aws/wrapper-deployment
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
          else
            git commit -m "Auto-format Terraform files [skip ci]"
            # Push to the current branch explicitly
            BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
            git push origin HEAD:${BRANCH_NAME}
            echo "✅ Formatted files committed and pushed to ${BRANCH_NAME}"
          fi

      - name: Terraform Init
        working-directory: ./workspace_deployment/aws/wrapper-deployment
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: ./workspace_deployment/aws/wrapper-deployment
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./workspace_deployment/aws/wrapper-deployment
        run: terraform plan -input=false -no-color -out=tfplan
        env:
          # Non-sensitive config comes from terraform.tfvars (committed to repo)
          # Only sensitive credentials are passed as environment variables
          TF_VAR_databricks_account_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
          TF_VAR_databricks_account_host: ${{ secrets.DATABRICKS_ACCOUNT_HOST }}
          TF_VAR_databricks_client_id: ${{ secrets.DATABRICKS_CLIENT_ID }}
          TF_VAR_databricks_client_secret: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          TF_VAR_databricks_crossaccount_role_external_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
        continue-on-error: false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./workspace_deployment/aws/wrapper-deployment
        run: terraform apply -input=false -auto-approve tfplan
        env:
          # Same sensitive credentials as plan step
          TF_VAR_databricks_account_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
          TF_VAR_databricks_account_host: ${{ secrets.DATABRICKS_ACCOUNT_HOST }}
          TF_VAR_databricks_client_id: ${{ secrets.DATABRICKS_CLIENT_ID }}
          TF_VAR_databricks_client_secret: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          TF_VAR_databricks_crossaccount_role_external_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}

      - name: Verify State in S3 Backend
        if: always()
        run: |
          echo "=========================================="
          echo "Verifying Remote State Backend"
          echo "=========================================="
          echo ""
          
          # Check if state exists in S3
          echo "📦 Checking S3 state file..."
          if aws s3 ls s3://jg-dbx-terraform-state/databricks/pl-cmk/terraform.tfstate; then
            echo "   ✅ State file exists in S3"
            
            # Get state file info
            STATE_SIZE=$(aws s3 ls s3://jg-dbx-terraform-state/databricks/pl-cmk/terraform.tfstate --human-readable | awk '{print $3 " " $4}')
            echo "   📊 State file size: ${STATE_SIZE}"
          else
            echo "   ⚠️  State file not found in S3 (may be first run)"
          fi
          echo ""
          
          # Check for state lock
          echo "🔒 Checking state lock status..."
          LOCK_STATUS=$(aws dynamodb get-item \
            --table-name jg-dbx-terraform-locks \
            --key '{"LockID": {"S": "jg-dbx-terraform-state/databricks/pl-cmk/terraform.tfstate"}}' \
            --region us-east-1 2>/dev/null || echo "{}")
          
          if [ "$LOCK_STATUS" == "{}" ] || [ -z "$LOCK_STATUS" ]; then
            echo "   ✅ No lock found (state is unlocked)"
          else
            echo "   ⚠️  Lock still exists:"
            echo "$LOCK_STATUS" | jq -r '.Item.Info.S' 2>/dev/null || echo "$LOCK_STATUS"
          fi
          echo ""
          echo "=========================================="

      - name: Upload Lock File Only
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-lock-file
          path: workspace_deployment/aws/wrapper-deployment/.terraform.lock.hcl
          retention-days: 7